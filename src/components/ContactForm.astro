---
export interface Props {
  action: string;
}

const { action } = Astro.props;
---

  <form 
    id="contact-form"
    action={action}
    method="POST"
    class="card p-10 text-gray-800 max-w-2xl mx-auto"
  >
  <div class="grid md:grid-cols-2 gap-6 mb-6">
    <div>
              <label for="name" class="form-label">Full Name *</label>
        <input 
          type="text" 
          id="name" 
          name="name" 
          required 
          minlength="2"
          class="form-input"
          placeholder="Your full name"
        />
      <span class="error-message text-red-500 text-sm hidden"></span>
    </div>
    <div>
              <label for="phone" class="form-label">Phone Number *</label>
        <input 
          type="tel" 
          id="phone" 
          name="phone" 
          required 
          pattern="[0-9\s\-\(\)\+]{10,15}"
          class="form-input"
          placeholder="01279 123456"
        />
      <span class="error-message text-red-500 text-sm hidden"></span>
    </div>
  </div>
  
  <div class="mb-6">
    <label for="email" class="form-label">Email Address *</label>
    <input 
      type="email" 
      id="email" 
      name="email" 
      required 
      class="form-input"
      placeholder="your.email@example.com"
    />
    <span class="error-message text-red-500 text-sm hidden"></span>
  </div>
  
  <div class="mb-6">
    <label for="service" class="form-label">Service Needed *</label>
    <select 
      id="service" 
      name="service" 
      required 
      class="form-input"
    >
      <option value="">Please select a service</option>
      <option value="double-glazing">Double Glazing Installation</option>
      <option value="window-repair">Window Repair</option>
      <option value="window-replacement">Window Replacement</option>
      <option value="consultation">Free Consultation</option>
    </select>
    <span class="error-message text-red-500 text-sm hidden"></span>
  </div>
  
  <!-- Honeypot field for spam protection -->
  <input type="text" name="website" style="display:none;" tabindex="-1" autocomplete="off" />
  
  <button 
    type="submit" 
    id="submit-btn"
    class="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed"
  >
    <span class="btn-text">Get My Free Quote</span>
    <span class="btn-loading hidden">
      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-black inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Sending...
    </span>
  </button>
  
  <p class="text-sm text-gray-600 mt-4 text-center">
    We'll contact you within 2 hours during business hours to arrange your free consultation.
  </p>
  
  <div id="form-messages" class="mt-4 hidden">
    <div class="success-message bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded hidden">
      Thank you! Your enquiry has been sent successfully. We'll be in touch shortly.
    </div>
    <div class="error-message bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded hidden">
      Sorry, there was an error sending your message. Please try again or call us directly.
    </div>
  </div>
</form>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('submit-btn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = submitBtn.querySelector('.btn-loading');
    const formMessages = document.getElementById('form-messages');
    const successMessage = formMessages.querySelector('.success-message');
    const errorMessage = formMessages.querySelector('.error-message');

    // Form validation
    function validateField(field) {
      const errorSpan = field.parentNode.querySelector('.error-message');
      let isValid = true;
      let message = '';

      if (field.hasAttribute('required') && !field.value.trim()) {
        isValid = false;
        message = 'This field is required.';
      } else if (field.type === 'email' && field.value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value)) {
          isValid = false;
          message = 'Please enter a valid email address.';
        }
      } else if (field.type === 'tel' && field.value) {
        const phoneRegex = /^[0-9\s\-\(\)\+]{10,15}$/;
        if (!phoneRegex.test(field.value)) {
          isValid = false;
          message = 'Please enter a valid phone number.';
        }
      }

      if (isValid) {
        field.classList.remove('border-red-500');
        field.classList.add('border-green-500');
        errorSpan.textContent = '';
        errorSpan.classList.add('hidden');
      } else {
        field.classList.remove('border-green-500');
        field.classList.add('border-red-500');
        errorSpan.textContent = message;
        errorSpan.classList.remove('hidden');
      }

      return isValid;
    }

    // Add real-time validation
    const fields = form.querySelectorAll('input[required], select[required]');
    fields.forEach(field => {
      field.addEventListener('blur', () => validateField(field));
      field.addEventListener('input', () => {
        if (field.classList.contains('border-red-500')) {
          validateField(field);
        }
      });
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Hide previous messages
      formMessages.classList.add('hidden');
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');

      // Validate all fields
      let isFormValid = true;
      fields.forEach(field => {
        if (!validateField(field)) {
          isFormValid = false;
        }
      });

      if (!isFormValid) {
        return;
      }

      // Check honeypot
      if (form.website.value) {
        return; // Likely spam
      }

      // Show loading state
      submitBtn.disabled = true;
      btnText.classList.add('hidden');
      btnLoading.classList.remove('hidden');

      try {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        // Add timestamp and source
        data.timestamp = new Date().toISOString();
        data.source = 'website';
        data.page = window.location.pathname;

        const response = await fetch(form.action, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });

        if (response.ok) {
          // Check if this was a business contact request
          const selectedBusinessPlaceId = data.selected_business_place_id;
          
          if (selectedBusinessPlaceId && typeof window.showBusinessContact === 'function') {
            // Show the business contact details instead of redirecting
            window.showBusinessContact(selectedBusinessPlaceId);
            
            // Show success message
            formMessages.classList.remove('hidden');
            successMessage.classList.remove('hidden');
            successMessage.textContent = 'Contact details revealed below!';
            
            // Track successful business contact reveal
            if (typeof gtag !== 'undefined') {
              gtag('event', 'business_contact_revealed', {
                'business_name': data.selected_business_name,
                'place_id': selectedBusinessPlaceId
              });
            }
          } else {
            // Normal form submission - redirect to thank you page
            window.location.href = '/thank-you/';
          }
        } else {
          throw new Error('Network response was not ok');
        }
      } catch (error) {
        console.error('Form submission error:', error);
        
        // Show error message
        formMessages.classList.remove('hidden');
        errorMessage.classList.remove('hidden');
        
        // Track form submission error (for analytics)
        if (typeof gtag !== 'undefined') {
          gtag('event', 'form_error', {
            'error_message': error.message
          });
        }
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        btnText.classList.remove('hidden');
        btnLoading.classList.add('hidden');
      }
    });

    // Track form interactions (for analytics)
    form.addEventListener('focus', function(e) {
      if (typeof gtag !== 'undefined') {
        gtag('event', 'form_start');
      }
    }, true);
  });
</script> 