---
// ContactForm component - will be updated for Google Sheets API integration
---

<form 
  id="contact-form"
  class="card p-10 text-gray-800 max-w-2xl mx-auto"
>
  <!-- Name Fields Row -->
  <div class="grid md:grid-cols-2 gap-6 mb-6">
    <div>
      <label for="first-name" class="form-label">First name *</label>
      <input 
        type="text" 
        id="first-name" 
        name="firstName" 
        required 
        minlength="2"
        class="form-input"
        placeholder="First name"
      />
      <span class="error-message text-red-500 text-sm hidden"></span>
    </div>
    <div>
      <label for="last-name" class="form-label">Last name *</label>
      <input 
        type="text" 
        id="last-name" 
        name="lastName" 
        required 
        minlength="2"
        class="form-input"
        placeholder="Last name"
      />
      <span class="error-message text-red-500 text-sm hidden"></span>
    </div>
  </div>
  
  <div class="mb-6">
    <label for="email" class="form-label">Email *</label>
    <input 
      type="email" 
      id="email" 
      name="email" 
      required 
      class="form-input"
      placeholder="you@company.com"
    />
    <span class="error-message text-red-500 text-sm hidden"></span>
  </div>

  <div class="mb-6">
    <label for="phone" class="form-label">Phone number *</label>
    <input 
      type="tel" 
      id="phone" 
      name="phone" 
      required 
      class="form-input"
      placeholder="07476 382827"
    />
    <span class="error-message text-red-500 text-sm hidden"></span>
  </div>
  
  <div class="mb-6">
    <label for="service" class="form-label">Service needed *</label>
    <select 
      id="service" 
      name="service" 
      required 
      class="form-input"
    >
      <option value="">Please select a service</option>
      <option value="double-glazing">Double Glazing Installation</option>
      <option value="window-repair">Window Repair</option>
      <option value="window-replacement">Window Replacement</option>
      <option value="consultation">Free Consultation</option>
    </select>
    <span class="error-message text-red-500 text-sm hidden"></span>
  </div>

  <div class="mb-6">
    <label for="message" class="form-label">Message</label>
    <textarea
      id="message"
      name="message"
      rows="4"
      class="form-input resize-none"
      placeholder="Tell us about your window project, property type, number of windows, or any specific requirements..."
    ></textarea>
    <span class="error-message text-red-500 text-sm hidden"></span>
  </div>

  <!-- Privacy Policy Checkbox -->
  <div class="flex items-start space-x-3 mb-6">
    <input
      type="checkbox"
      id="privacy"
      name="privacy"
      required
      class="w-4 h-4 text-blue-600 bg-white border-gray-300 rounded focus:ring-blue-500 focus:ring-2 mt-1"
    />
    <label for="privacy" class="text-sm text-gray-600 leading-relaxed">
      You agree to our friendly <a href="/privacy" class="text-blue-600 underline hover:text-blue-700">privacy policy</a>.
    </label>
  </div>
  
  <!-- Honeypot field for spam protection -->
  <input type="text" name="website" style="display:none;" tabindex="-1" autocomplete="off" />
  
  <button 
    type="submit" 
    id="submit-btn"
    class="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed"
  >
    <span class="btn-text">Get My Free Quote</span>
    <span class="btn-loading hidden">
      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-black inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Sending...
    </span>
  </button>
  
  <p class="text-sm text-gray-600 mt-4 text-center">
    We'll contact you within 2 hours during business hours to arrange your free consultation.
  </p>
  
  <div id="form-messages" class="mt-4 hidden">
    <div class="success-message bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded hidden">
      Thank you! Your enquiry has been sent successfully. We'll be in touch shortly.
    </div>
    <div class="error-message bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded hidden">
      Sorry, there was an error sending your message. Please try again or call us directly.
    </div>
  </div>
</form>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('submit-btn');
    const btnText = submitBtn?.querySelector('.btn-text');
    const btnLoading = submitBtn?.querySelector('.btn-loading');
    const formMessages = document.getElementById('form-messages');
    const successMessage = formMessages?.querySelector('.success-message');
    const errorMessage = formMessages?.querySelector('.error-message');

    // Form validation
    function validateField(field) {
      const errorSpan = field.parentNode?.querySelector('.error-message') || field.closest('div')?.querySelector('.error-message');
      let isValid = true;
      let message = '';

      if (field.hasAttribute('required') && !field.value.trim()) {
        isValid = false;
        message = 'This field is required.';
      } else if (field.type === 'email' && field.value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value)) {
          isValid = false;
          message = 'Please enter a valid email address.';
        }
      } else if (field.type === 'tel' && field.value) {
        const phoneRegex = /^[0-9\s\-\(\)\+]{10,15}$/;
        if (!phoneRegex.test(field.value)) {
          isValid = false;
          message = 'Please enter a valid phone number.';
        }
      }

      if (isValid) {
        field.classList.remove('border-red-500');
        field.classList.add('border-green-500');
        if (errorSpan) {
          errorSpan.textContent = '';
          errorSpan.classList.add('hidden');
        }
      } else {
        field.classList.remove('border-green-500');
        field.classList.add('border-red-500');
        if (errorSpan) {
          errorSpan.textContent = message;
          errorSpan.classList.remove('hidden');
        }
      }

      return isValid;
    }

    // Add real-time validation
    const fields = form?.querySelectorAll('input[required], select[required], input[type="checkbox"][required], textarea');
    fields?.forEach(field => {
      field.addEventListener('blur', () => validateField(field));
      field.addEventListener('input', () => {
        if (field.classList.contains('border-red-500')) {
          validateField(field);
        }
      });
    });

    // Form submission with Google Sheets API
    form?.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Hide previous messages
      formMessages?.classList.add('hidden');
      successMessage?.classList.add('hidden');
      errorMessage?.classList.add('hidden');

      // Validate all fields
      let isFormValid = true;
      fields?.forEach(field => {
        if (!validateField(field)) {
          isFormValid = false;
        }
      });

      if (!isFormValid) {
        return;
      }

      // Check honeypot
      const websiteField = form.querySelector('input[name="website"]');
      if (websiteField && websiteField.value) {
        return; // Likely spam
      }

      // Show loading state
      if (submitBtn) {
        submitBtn.disabled = true;
        btnText?.classList.add('hidden');
        btnLoading?.classList.remove('hidden');
      }

      try {
        const formData = new FormData(form);
        
        // Add form metadata
        formData.append('formType', 'homepage');
        formData.append('source', 'website-homepage');

        // Track form submission with Vercel Analytics
        if (typeof window.va !== 'undefined') {
          window.va('track', 'Homepage Form Submission', {
            name: `${formData.get('firstName')} ${formData.get('lastName')}`,
            email: formData.get('email'),
            phone: formData.get('phone'),
            service: formData.get('service'),
            source: 'website-homepage',
            page: window.location.pathname
          });
        }

        const response = await fetch('/api/submit', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Track successful submission
          if (typeof window.va !== 'undefined') {
            window.va('track', 'Homepage Form Success', {
              name: `${formData.get('firstName')} ${formData.get('lastName')}`,
              email: formData.get('email'),
              service: formData.get('service')
            });
          }
          
          // Redirect to thank you page
          window.location.href = '/thank-you/';
        } else {
          throw new Error(result.error || 'Network response was not ok');
        }
      } catch (error) {
        console.error('Form submission error:', error);
        
        // Show error message
        formMessages?.classList.remove('hidden');
        errorMessage?.classList.remove('hidden');
        if (errorMessage) {
          errorMessage.textContent = error.message || 'An error occurred. Please try again.';
        }

        // Track form error
        if (typeof window.va !== 'undefined') {
          window.va('track', 'Homepage Form Error', {
            error: error.message,
            page: window.location.pathname
          });
        }
      } finally {
        // Reset button state
        if (submitBtn) {
          submitBtn.disabled = false;
          btnText?.classList.remove('hidden');
          btnLoading?.classList.add('hidden');
        }
      }
    });
  });
</script> 